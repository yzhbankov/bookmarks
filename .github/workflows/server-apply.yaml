name: 'Terraform Apply PROD'

on:
  issue_comment:
    types: [created]
jobs:
  terraform:
    name: 'Apply Terraform'

    # Only execute if this is a pull request and the comment /apply prod was made and the issue has the planned label
    if: ${{ github.event.issue.pull_request && (github.event.comment.body == '/apply prod') && contains(github.event.issue.labels.*.name, 'prod_planned') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    env:
      environment: prod
      # These env variables will be passed to the Terraform during its running and will be used to S3 backend and AWS connection
      # in automatic way
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Check PR base branch name
        id: base-branch
        run: |
          repo_name=${{ github.repository }}
          pr_number=$(jq --raw-output .issue.number "${{ github.event_path }}")
          
          response=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/$repo_name/pulls/$pr_number")
          
          base_branch=$(echo "$response" | jq --raw-output .base.ref)
          echo "Base branch: $base_branch"
          
          if [ $base_branch != master ]; then
            echo "Skipping. Can run only for PR to a 'master' branch"
            return
          fi

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ github.event.issue.number }}/merge

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.5

      - name: Initialize Terraform
        working-directory: ./dev-ops/terraform/
        run: terraform init -reconfigure -upgrade

      - name: Select Terraform workspace
        working-directory: ./dev-ops/terraform/
        run: terraform workspace select -or-create ${environment}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: ./dev-ops/terraform/
        run: terraform fmt -check -recursive

      # Build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        id: applystep
        working-directory: ./dev-ops/terraform/
        continue-on-error: true
        run: terraform apply -auto-approve -var-file="./env/${environment}.tfvars" -input=false -no-color

      # If the apply was successful, post a comment with the applied output
      - name: Post RPP Plan and Apply to GitHub PR
        if: steps.applystep.outcome == 'success'
        env:
          URL: ${{ github.event.issue.comments_url }}
          LABEL: ${{ github.event.issue.url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl \
            -X POST \
            $LABEL/labels \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d '["applied"]'

      # If the apply was successful, merge the branch into the main
      - name: Merge into master
        if: steps.applystep.outcome == 'success'
        env:
          URL: ${{ github.event.repository.url }}/pulls/${{ github.event.issue.number }}/merge
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl \
          -X PUT \
          $URL \
          -H "Content-Type: application/json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -d '{"commit_title":"terraform update applied"}'

      # If the apply failed, post the errors
      - name: Post Apply Failure
        if: steps.applystep.outcome == 'failure'
        env:
          URL: ${{ github.event.issue.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (printf "Apply failed \n\n\`\`\`" && echo -n '${{ steps.applystep.outputs.stderr }}' && printf "\`\`\`\n") > comment.txt
          jq -R -s '.' < comment.txt > comment2.txt
          truncate -s -1 comment2.txt
          (echo -n '{ "body": ' && cat comment2.txt && echo -n ' }') > comment3.txt
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d @comment3.txt
